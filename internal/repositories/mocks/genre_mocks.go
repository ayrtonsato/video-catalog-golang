// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/genre_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "github.com/ayrtonsato/video-catalog-golang/internal/models"
	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGenreDB is a mock of GenreDB interface
type MockGenreDB struct {
	ctrl     *gomock.Controller
	recorder *MockGenreDBMockRecorder
}

// MockGenreDBMockRecorder is the mock recorder for MockGenreDB
type MockGenreDBMockRecorder struct {
	mock *MockGenreDB
}

// NewMockGenreDB creates a new mock instance
func NewMockGenreDB(ctrl *gomock.Controller) *MockGenreDB {
	mock := &MockGenreDB{ctrl: ctrl}
	mock.recorder = &MockGenreDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenreDB) EXPECT() *MockGenreDBMockRecorder {
	return m.recorder
}

// GetGenres mocks base method
func (m *MockGenreDB) GetGenres() ([]models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres")
	ret0, _ := ret[0].([]models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres
func (mr *MockGenreDBMockRecorder) GetGenres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockGenreDB)(nil).GetGenres))
}

// GetByID mocks base method
func (m *MockGenreDB) GetByID(id uuid.UUID) (models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockGenreDBMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGenreDB)(nil).GetByID), id)
}

// GetGenreByIDWithCategories mocks base method
func (m *MockGenreDB) GetGenreByIDWithCategories(id uuid.UUID) (models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenreByIDWithCategories", id)
	ret0, _ := ret[0].(models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByIDWithCategories indicates an expected call of GetGenreByIDWithCategories
func (mr *MockGenreDBMockRecorder) GetGenreByIDWithCategories(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByIDWithCategories", reflect.TypeOf((*MockGenreDB)(nil).GetGenreByIDWithCategories), id)
}

// Save mocks base method
func (m *MockGenreDB) Save(name string, categories []uuid.UUID) (models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", name, categories)
	ret0, _ := ret[0].(models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockGenreDBMockRecorder) Save(name, categories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGenreDB)(nil).Save), name, categories)
}

// Update mocks base method
func (m *MockGenreDB) Update(id uuid.UUID, fields []string, values ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{id, fields}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGenreDBMockRecorder) Update(id, fields interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id, fields}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGenreDB)(nil).Update), varargs...)
}

// Delete mocks base method
func (m *MockGenreDB) Delete(genre models.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGenreDBMockRecorder) Delete(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGenreDB)(nil).Delete), genre)
}
