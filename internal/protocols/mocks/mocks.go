// Code generated by MockGen. DO NOT EDIT.
// Source: internal/protocols/validation.go

// Package mock_protocols is a generated GoMock package.
package mock_protocols

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidation is a mock of Validation interface
type MockValidation struct {
	ctrl     *gomock.Controller
	recorder *MockValidationMockRecorder
}

// MockValidationMockRecorder is the mock recorder for MockValidation
type MockValidationMockRecorder struct {
	mock *MockValidation
}

// NewMockValidation creates a new mock instance
func NewMockValidation(ctrl *gomock.Controller) *MockValidation {
	mock := &MockValidation{ctrl: ctrl}
	mock.recorder = &MockValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidation) EXPECT() *MockValidationMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockValidation) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockValidationMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidation)(nil).Validate))
}

// GetFieldName mocks base method
func (m *MockValidation) GetFieldName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFieldName indicates an expected call of GetFieldName
func (mr *MockValidationMockRecorder) GetFieldName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldName", reflect.TypeOf((*MockValidation)(nil).GetFieldName))
}
